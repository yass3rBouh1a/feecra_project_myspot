//that s only for us to see !!! and it s just a proto
//****1******
Users:({
    user_id: { type: Number, required: true, unique: true },
    username: { type: String, required: true },
    email: { type: String, required: true, unique: true ,match: /.+\@.+\..+/},
    password: { type: String, required: true },
    profile_picture: { type: String },
    bio: { type: String },
    date_of_birth: { type: Date },// you wish you were never born
    user_type: { type: String, required: true },
    created_at: { type: Date, default: Date.now },
});
//****2****
Admins:({
    admin_id: { type: Number, required: true, unique: true },
    user_id: {
      type: mongoose.Schema.Types.ObjectId, // Reference to the User id
      ref: 'User', 
      required: true  }, 
    role: { type: String, required: true }, //role the land 
    permissions: { type: String }, // read,write,delete,
    created_at: { type: Date, default: Date.now },
});
//****3*****
BusinessAccounts:({
    business_id: { type: Number, required: true, unique: true },
    user_id: { 
        type: mongoose.Schema.Types.ObjectId, 
        ref: 'User',                         // Reference to the User id
        required: true 
    },
    business_name: { type: String, required: true },
    address: { type: String, required: true },
    cuisine_type: { type: String }, // e.g., "Italian", "Chinese", etc.
    phone_number: { type: String, required: true },
    verified: { type: Boolean, default: false }, 
    created_at: { type: Date, default: Date.now }, 
});
//****4*****
Notifications:({
    notification_id: { type: Number, required: true, unique: true }, 
    user_id: { 
        type: mongoose.Schema.Types.ObjectId,
        ref: 'User',
        required: true 
    },
    title: { type: String, required: true },
    message: { type: String, required: true },
    is_read: { type: Boolean, default: false },
    created_at: { type: Date, default: Date.now },
});
//*****5******
Spots:({
    spot_id: { type: Number, required: true, unique: true }, 
    name: { type: String, required: true }, // spot's name
    description: { type: String, required: true }, 
    type: { type: String, required: true }, // park,restaurant,motion in the oceon,...
    latitude: { type: Number, required: true }, // is it high or low like my life
    longitude: { type: Number, required: true }, // user your pp to mesur the longitude 
    created_by: { 
        type: mongoose.Schema.Types.ObjectId, // Reference to the user who found the spot congratulations you found shit
        ref: 'User', 
        required: true 
    },
    created_at: { type: Date, default: Date.now }, 
});
//****6*****
Saved_Posts({
    saved_post_id: { type: Number, required: true, unique: true },
    user_id: { 
        type: mongoose.Schema.Types.ObjectId, 
        ref: 'User',
        required: true 
    },
    spot_id: { 
        type: mongoose.Schema.Types.ObjectId,
        ref: 'Spot',
        required: true 
    },
});
//****7****
Reviews:({
    review_id: { 
        type: Number, 
        required: true, 
        unique: true 
    },
    user_id: { 
        type: mongoose.Schema.Types.ObjectId, 
        ref: 'User',
        required: true 
    },
    spot_id: { 
        type: mongoose.Schema.Types.ObjectId, 
        ref: 'Spot',
        required: true 
    },
    rating: { 
        type: Number, required: true,
        min: 1, 
        max: 5 // Rating between 1 and 5
    },
    comment: { 
        type: String, required: false // The comment is optional
    },
    likes_count: { 
        type: Number, default: 0 // Default value for likes count
    },
    created_at: { type: Date, default: Date.now }
});
//****8*****
API_integration:({
    integration_id: { type: Number, required: true, unique: true},
    spot_id: { 
        type: mongoose.Schema.Types.ObjectId,
        ref: 'Spot',
        required: true 
    },
    api_name: { type: String, required: true },
    external_rating: { type: Number, required: false, 
        min: 0, 
        max: 5 // Rating from the external API (optional)
    },
    external_url: { type: String, required: false}
});
//****9*****
Photos:
    photo_id: { type: Number, required: true, unique: true },
    spot_id: { 
        type: mongoose.Schema.Types.ObjectId,
        ref: 'Spot',
        required: true 
    },
    uploaded_by: { 
        type: mongoose.Schema.Types.ObjectId,
        ref: 'User',
        required: true 
    },
    photo_url: { type: String, required: true },// URL of the uploaded photo
    storage_path: { type: String, required: true },//the path to my **** the comment is so cringe it got deleted (path to stored photo)
    uploaded_at: { type: Date, default: Date.now }
});
//****10*****
Favorites:({
    favorite_id: { type: Number, required: true, unique: true},
    user_id: { 
        type: mongoose.Schema.Types.ObjectId, 
        ref: 'User',
        required: true 
    },
    spot_id: { 
        type: mongoose.Schema.Types.ObjectId, 
        ref: 'Spot',
        required: true 
    }
});
//***12*****
Reports:({
    report_id: { type: Number, required: true, unique: true },
    reported_by: { 
        type: mongoose.Schema.Types.ObjectId, 
        ref: 'User',
        required: true 
    },
    spot_id: { 
        type: mongoose.Schema.Types.ObjectId, 
        ref: 'Spot',
        required: true 
    },
    review_id: { 
        type: mongoose.Schema.Types.ObjectId, 
        ref: 'Review',
        required: false // Optional
    },
    reason: { type: String,  required: true },// I just want to report
    status: { 
        type: String, 
        enum: ['pending', 'resolved', 'dismissed'], // mybe somthing like that
        default: 'pending' // Default status is 'pending' on hold for eternity
    },
    created_at: {  type: Date, default: Date.now }
});
//****13****
Tags:({
    tag_id: { type: Number, required: true, unique: true },
    name: { type: String, required: true, unique: true },//sexy spot
});
//****14****
Spot_Tags:({
    spot_id: { 
        type: mongoose.Schema.Types.ObjectId,
        ref: 'Spot',
        required: true
    },
    tag_id: { 
        type: mongoose.Schema.Types.ObjectId,
        ref: 'Tag',
        required: true
    }
});
